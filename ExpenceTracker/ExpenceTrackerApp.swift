//
//  ExpenseTrackerApp.swift
//  ExpenseTracker
//
//  Created by Developer on 24/06/2025.
//

import SwiftUI
import UserNotifications

@main
struct ExpenseTrackerApp: App {
    
    // MARK: - App State (Singleton)
    @StateObject private var appState = AppState.shared
    
    // MARK: - Scene Delegate –¥–ª—è lifecycle events
    @UIApplicationDelegateAdaptor(AppDelegate.self) var appDelegate
    
    var body: some Scene {
        WindowGroup {
            ContentView()
                .environmentObject(appState) // –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º AppState –≤–æ –≤—Å—ë –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                .environment(\.managedObjectContext, CoreDataStack.shared.viewContext)
                .preferredColorScheme(appState.userSettings.theme.colorScheme) // –†–µ–∞–∫—Ç–∏–≤–Ω–∞—è —Ç–µ–º–∞
                .onAppear {
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
                    Task {
                        await appState.loadInitialData()
                    }
                }
                .onChange(of: appState.userSettings.theme) { newTheme in
                    // –†–µ–∞–∫—Ç–∏–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—É –ø—Ä–∏ –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                    print("üé® App: Theme changed to \(newTheme.rawValue)")
                }
                .alert("–û—à–∏–±–∫–∞", isPresented: .constant(appState.errorMessage != nil)) {
                    Button("OK") {
                        appState.clearError()
                    }
                } message: {
                    Text(appState.errorMessage ?? "")
                }
        }
    }
}

// MARK: - Content View (–≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω)
struct ContentView: View {
    @EnvironmentObject var appState: AppState
    
    var body: some View {
        Group {
            if appState.isLoading {
                LoadingView()
            } else {
                ExpenseHomeView()
            }
        }
        .animation(.easeInOut(duration: 0.3), value: appState.isLoading)
    }
}

// MARK: - Loading View
struct LoadingView: View {
    @State private var isAnimating = false
    
    var body: some View {
        VStack(spacing: 32) {
            Spacer()
            
            // App Logo —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            ZStack {
                Circle()
                    .stroke(
                        LinearGradient(
                            colors: [Color.expensePurple.opacity(0.3), Color.expenseBlue.opacity(0.3)],
                            startPoint: .topLeading,
                            endPoint: .bottomTrailing
                        ),
                        lineWidth: 3
                    )
                    .frame(width: 100, height: 100)
                    .rotationEffect(.degrees(isAnimating ? 360 : 0))
                    .animation(.linear(duration: 2).repeatForever(autoreverses: false), value: isAnimating)
                
                RoundedRectangle(cornerRadius: 20)
                    .fill(
                        LinearGradient(
                            colors: [Color.expensePurple, Color.expenseBlue],
                            startPoint: .topLeading,
                            endPoint: .bottomTrailing
                        )
                    )
                    .frame(width: 80, height: 80)
                    .overlay(
                        Image(systemName: "dollarsign.circle.fill")
                            .font(.system(size: 40))
                            .foregroundColor(.white)
                    )
                    .scaleEffect(isAnimating ? 1.1 : 1.0)
                    .animation(.easeInOut(duration: 1).repeatForever(autoreverses: true), value: isAnimating)
            }
            
            VStack(spacing: 12) {
                Text("ExpenseTracker")
                    .font(.title)
                    .fontWeight(.bold)
                    .foregroundColor(.primary)
                
                Text("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
                    .font(.subheadline)
                    .foregroundColor(.secondary)
                
                ProgressView()
                    .scaleEffect(1.2)
                    .tint(Color.expensePurple)
            }
            
            Spacer()
        }
        .frame(maxWidth: .infinity, maxHeight: .infinity)
        .background(
            LinearGradient(
                colors: [
                    Color(.systemBackground),
                    Color.expensePurple.opacity(0.05)
                ],
                startPoint: .top,
                endPoint: .bottom
            )
        )
        .onAppear {
            isAnimating = true
        }
    }
}

// MARK: - App Delegate –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
class AppDelegate: NSObject, UIApplicationDelegate {
    
    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        
        print("üöÄ ExpenseTracker: App launched")
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        setupNotifications()
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
        setupAppearance()
        
        return true
    }
    
    func applicationDidEnterBackground(_ application: UIApplication) {
        print("üì± ExpenseTracker: Entered background")
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —É—Ö–æ–¥–µ –≤ —Ñ–æ–Ω
        CoreDataStack.shared.save()
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Å—É–º–º—ã –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
        if AppState.shared.userSettings.privacySettings.hideAmountsInBackground {
            hideAmountsInSnapshot()
        }
    }
    
    func applicationWillEnterForeground(_ application: UIApplication) {
        print("üì± ExpenseTracker: Will enter foreground")
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ
        Task { @MainActor in
            await AppState.shared.refreshData()
        }
    }
    
    // MARK: - Private Setup Methods
    
    private func setupNotifications() {
        UNUserNotificationCenter.current().delegate = self
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        UNUserNotificationCenter.current().getNotificationSettings { settings in
            DispatchQueue.main.async {
                print("üì± Notification status: \(settings.authorizationStatus.rawValue)")
            }
        }
    }
    
    private func setupAppearance() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
        
        // Navigation Bar
        let navBarAppearance = UINavigationBarAppearance()
        navBarAppearance.configureWithOpaqueBackground()
        navBarAppearance.backgroundColor = UIColor.systemBackground
        navBarAppearance.shadowColor = UIColor.clear
        
        UINavigationBar.appearance().standardAppearance = navBarAppearance
        UINavigationBar.appearance().compactAppearance = navBarAppearance
        UINavigationBar.appearance().scrollEdgeAppearance = navBarAppearance
        
        // Tab Bar (–µ—Å–ª–∏ –±—É–¥–µ—Ç –≤ –±—É–¥—É—â–µ–º)
        let tabBarAppearance = UITabBarAppearance()
        tabBarAppearance.configureWithOpaqueBackground()
        UITabBar.appearance().standardAppearance = tabBarAppearance
        UITabBar.appearance().scrollEdgeAppearance = tabBarAppearance
        
        print("üé® ExpenseTracker: Appearance configured")
    }
    
    private func hideAmountsInSnapshot() {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è sensitive data
        // –≤ screenshot –¥–ª—è App Switcher
        print("üîí ExpenseTracker: Hiding amounts in snapshot")
    }
}

// MARK: - UNUserNotificationCenterDelegate
extension AppDelegate: UNUserNotificationCenterDelegate {
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
    func userNotificationCenter(
        _ center: UNUserNotificationCenter,
        willPresent notification: UNNotification,
        withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void
    ) {
        
        print("üì± Received notification while app active: \(notification.request.identifier)")
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–∞–∂–µ –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
        completionHandler([.banner, .sound])
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    func userNotificationCenter(
        _ center: UNUserNotificationCenter,
        didReceive response: UNNotificationResponse,
        withCompletionHandler completionHandler: @escaping () -> Void
    ) {
        
        let identifier = response.notification.request.identifier
        print("üì± User tapped notification: \(identifier)")
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        Task { @MainActor in
            await handleNotificationTap(identifier: identifier)
        }
        
        completionHandler()
    }
    
    @MainActor
    private func handleNotificationTap(identifier: String) async {
        switch identifier {
        case "daily_reminder":
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç—ã
            print("üì± Opening add expense from notification")
            
        case "budget_warning_75", "budget_exceeded":
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –±—é–¥–∂–µ—Ç–∞
            print("üì± Opening budget settings from notification")
            
        case "weekly_report":
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print("üì± Opening stats from notification")
            
        default:
            // –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            await AppState.shared.refreshData()
        }
    }
}

// MARK: - Preview Support
#Preview("Loading") {
    LoadingView()
}

#Preview("Content") {
    ContentView()
        .environmentObject(AppState.preview)
}
