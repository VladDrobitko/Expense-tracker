//
//  ExpenseViewModel.swift - –û–ë–ù–û–í–õ–ï–ù: –ø—Ä–æ—Å—Ç–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤
//  ExpenseTracker
//
//  Created by Developer on 24/06/2025.
//

import SwiftUI
import Foundation
import Combine

// MARK: - –õ—ë–≥–∫–∏–π ExpenseViewModel –∫–∞–∫ –∞–¥–∞–ø—Ç–µ—Ä –∫ AppState
@MainActor
final class ExpenseViewModel: ObservableObject {
    
    // MARK: - Reference to AppState (–Ω–µ –≤–ª–∞–¥–µ–µ–º –∏–º!)
    private let appState: AppState
    
    // MARK: - UI State (—Ç–æ–ª—å–∫–æ –¥–ª—è UI –ª–æ–≥–∏–∫–∏)
    @Published var showingAddExpense = false
    @Published var showingProfile = false // ‚úÖ –¢–µ–ø–µ—Ä—å —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤
    @Published var showingTodayExpenses = false // ‚úÖ –ù–û–í–û–ï: —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Ç—Ä–∞—Ç—ã
    @Published var showingAllExpenses = false // ‚úÖ –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    @Published var showFullStats = false
    
    // MARK: - –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
    @Published var showingSearch = false
    @Published var showingQuickActions = false
    
    // MARK: - Cancellables –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
    private var cancellables = Set<AnyCancellable>()
    
    // MARK: - Initialization
    init(appState: AppState) {
        self.appState = appState
        // ‚úÖ –£–ë–†–ê–õ–ò setupNotificationObservers() - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã
        print("‚úÖ ExpenseViewModel: Initialized as AppState adapter")
    }
    
    // MARK: - Computed Properties (–ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ AppState)
    
    // –î–∞–Ω–Ω—ã–µ
    var expenses: [Expense] { appState.expenses }
    var categories: [Category] { appState.categories }
    var selectedDate: Date { appState.selectedDate }
    
    // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
    var todaySpent: Double { appState.todaySpent }
    var thisMonthSpent: Double { appState.thisMonthSpent }
    var selectedDateSpent: Double { appState.selectedDateSpent }
    var displayedSpent: Double { appState.selectedDateSpent }
    var categorySpendingForSelectedDate: [UUID: Double] { appState.categorySpending }
    
    // –°–ø–∏—Å–∫–∏ –¥–ª—è UI
    var recentExpenses: [Expense] { appState.recentExpenses }
    var recentExpensesForHome: [Expense] { appState.recentExpensesForHome }
    var selectedDateExpenses: [Expense] { appState.selectedDateExpenses }
    
    // –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    var formattedDate: String { appState.formattedDate }
    var formattedDayOfWeek: String { appState.formattedDayOfWeek }
    var weekDates: [Date] { appState.weekDates }
    
    // –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    var isLoading: Bool { appState.isLoading }
    var errorMessage: String? { appState.errorMessage }
    var showingErrorAlert: Bool { appState.errorMessage != nil }
    
    // MARK: - Actions (–¥–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ AppState)
    
    func loadInitialData() async {
        await appState.loadInitialData()
    }
    
    func refreshData() async {
        await appState.refreshData()
    }
    
    func selectDate(_ date: Date) {
        appState.selectDate(date)
    }
    
    func addExpense(
        amount: Double,
        name: String,
        notes: String? = nil,
        categoryId: UUID,
        date: Date = Date()
    ) async -> Bool {
        
        let success = await appState.addExpense(
            amount: amount,
            name: name,
            notes: notes,
            categoryId: categoryId,
            date: date
        )
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
        if success {
            showingAddExpense = false
        }
        
        return success
    }
    
    func deleteExpense(_ expense: Expense) async -> Bool {
        return await appState.deleteExpense(expense)
    }
    
    func addCategory(name: String, icon: String, color: Color) async -> Bool {
        return await appState.addCategory(name: name, icon: icon, color: color)
    }
    
    func updateCategory(_ category: Category, name: String? = nil, icon: String? = nil, color: Color? = nil) async -> Bool {
        return await appState.updateCategory(category, name: name, icon: icon, color: color)
    }
    
    func deleteCategory(_ category: Category) async -> Bool {
        return await appState.deleteCategory(category)
    }
    
    // MARK: - Calendar Helpers (–¥–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ AppState)
    
    func dayAbbreviation(for date: Date) -> String {
        appState.dayAbbreviation(for: date)
    }
    
    func dayNumber(for date: Date) -> String {
        appState.dayNumber(for: date)
    }
    
    func isToday(_ date: Date) -> Bool {
        appState.isToday(date)
    }
    
    func isSelected(_ date: Date) -> Bool {
        appState.isSelected(date)
    }
    
    // MARK: - Error Handling (–¥–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ AppState)
    
    func clearError() {
        appState.clearError()
    }
    
    // MARK: - UI Actions (—Ç–æ–ª—å–∫–æ UI –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞—ë—Ç—Å—è –∑–¥–µ—Å—å)
    
    func showAddExpense() {
        showingAddExpense = true
    }
    
    func hideAddExpense() {
        showingAddExpense = false
    }
    
    // ‚úÖ –£–ü–†–û–©–ï–ù–ù–´–ï –º–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è - –ø—Ä–æ—Å—Ç–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
    func showProfile() {
        showingProfile = true
        print("üì± ExpenseViewModel: Showing profile screen")
    }
    
    func hideProfile() {
        showingProfile = false
        print("üì± ExpenseViewModel: Hiding profile screen")
    }
    
    func showTodayExpenses() {
        showingTodayExpenses = true
    }
    
    func hideTodayExpenses() {
        showingTodayExpenses = false
    }
    
    func showAllExpenses() {
        showingAllExpenses = true
    }
    
    func hideAllExpenses() {
        showingAllExpenses = false
    }
    
    func showStats() {
        showFullStats = true
    }
    
    func hideStats() {
        showFullStats = false
    }
    
    // MARK: - –ù–æ–≤—ã–µ UI Actions –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
    
    func showSearch() {
        showingSearch = true
    }
    
    func hideSearch() {
        showingSearch = false
    }
    
    func showQuickActions() {
        showingQuickActions = true
    }
    
    func hideQuickActions() {
        showingQuickActions = false
    }
    
    // MARK: - Helper Methods –¥–ª—è UI
    
    func formatAmount(_ amount: Double) -> String {
        return appState.formatAmount(amount)
    }
    
    func getExpensesForCategory(_ category: Category) -> [Expense] {
        return expenses.filter { $0.category?.identifier == category.identifier }
    }
    
    func getTotalForCategory(_ category: Category) -> Double {
        return getExpensesForCategory(category).reduce(0) { $0 + $1.amount }
    }
    
    func getExpenseCountForCategory(_ category: Category) -> Int {
        return getExpensesForCategory(category).count
    }
    
    // MARK: - Reactive Updates (—É–ø—Ä–æ—â–µ–Ω–æ)
    
    func setupUIReactions() {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        appState.$errorMessage
            .compactMap { $0 }
            .sink { [weak self] _ in
                self?.hideAddExpense()
                self?.hideSearch()
                self?.hideQuickActions()
                // ‚úÖ –ù–ï —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö - —ç—Ç–æ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
            }
            .store(in: &cancellables)
        
        print("‚úÖ ExpenseViewModel: UI reactions setup")
    }
    
    // MARK: - Cleanup
    
    deinit {
        cancellables.removeAll()
        print("üóëÔ∏è ExpenseViewModel: Deallocated")
    }
}

// MARK: - Convenience Computed Properties –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö UI —Å–ª—É—á–∞–µ–≤
extension ExpenseViewModel {
    
    // –ï—Å—Ç—å –ª–∏ —Ç—Ä–∞—Ç—ã –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    var hasExpensesForSelectedDate: Bool {
        !selectedDateExpenses.isEmpty
    }
    
    // –ï—Å—Ç—å –ª–∏ —Ç—Ä–∞—Ç—ã –≤–æ–æ–±—â–µ
    var hasAnyExpenses: Bool {
        !expenses.isEmpty
    }
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    var categoriesCount: Int {
        categories.count
    }
    
    // –ï—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    var hasCategories: Bool {
        !categories.isEmpty
    }
    
    // –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ —Ç—Ä–∞—Ç–∞–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    var topCategoryForSelectedDate: Category? {
        guard !categorySpendingForSelectedDate.isEmpty else { return nil }
        
        let topCategoryId = categorySpendingForSelectedDate.max { $0.value < $1.value }?.key
        return categories.first { $0.identifier == topCategoryId }
    }
    
    // –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –º–µ—Å—è—á–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞ (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
    var monthlyBudgetUsagePercentage: Double? {
        guard let monthlyBudget = appState.userSettings.budgetSettings.monthlyBudget,
              monthlyBudget > 0 else { return nil }
        
        return min(thisMonthSpent / monthlyBudget, 1.0)
    }
    
    // –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –±—é–¥–∂–µ—Ç
    var isBudgetExceeded: Bool {
        guard let percentage = monthlyBudgetUsagePercentage else { return false }
        return percentage > 1.0
    }
    
    // –ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –ª–∏ –∫ –ª–∏–º–∏—Ç—É –±—é–¥–∂–µ—Ç–∞ (>75%)
    var isBudgetNearLimit: Bool {
        guard let percentage = monthlyBudgetUsagePercentage else { return false }
        return percentage > 0.75
    }
    
    // ‚úÖ –ù–û–í–û–ï: —É–¥–æ–±–Ω—ã–π computed property –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
    var currentScreen: AppScreen {
        if showingProfile {
            return .profile
        } else {
            return .home
        }
    }
}

// ‚úÖ –ù–û–í–û–ï: Enum –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
enum AppScreen {
    case home
    case profile
    
    var description: String {
        switch self {
        case .home: return "–ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω"
        case .profile: return "–ü—Ä–æ—Ñ–∏–ª—å"
        }
    }
}

// MARK: - Factory Methods –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ViewModel'–∏
extension ExpenseViewModel {
    
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π ViewModel —Å –æ–±—â–∏–º AppState
    static func standard() -> ExpenseViewModel {
        return ExpenseViewModel(appState: AppState.shared)
    }
    
    // ViewModel –¥–ª—è Preview —Å mock –¥–∞–Ω–Ω—ã–º–∏
    static let preview: ExpenseViewModel = {
        return ExpenseViewModel(appState: AppState.preview)
    }()
    
    // ViewModel –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å –∑–∞–¥–∞–Ω–Ω—ã–º AppState
    static func forTesting(appState: AppState) -> ExpenseViewModel {
        return ExpenseViewModel(appState: appState)
    }
}

// MARK: - Backwards Compatibility (–≤—Ä–µ–º–µ–Ω–Ω–æ, –ø–æ–∫–∞ –Ω–µ –æ–±–Ω–æ–≤–∏–º –≤—Å–µ View)
extension ExpenseViewModel {
    
    // –≠—Ç–∏ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ View,
    // –ø–æ—Ç–æ–º —É–±–µ—Ä—ë–º –∫–æ–≥–¥–∞ –æ–±–Ω–æ–≤–∏–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    
    @available(*, deprecated, message: "Use appState.expenses directly")
    var allExpenses: [Expense] { expenses }
    
    @available(*, deprecated, message: "Use selectDate() instead")
    func updateSelectedDate(_ date: Date) {
        selectDate(date)
    }
}

// MARK: - Debug Helpers
#if DEBUG
extension ExpenseViewModel {
    
    func printCurrentState() {
        print("üêõ ExpenseViewModel Debug State:")
        print("   Current screen: \(currentScreen.description)")
        print("   Expenses count: \(expenses.count)")
        print("   Categories count: \(categories.count)")
        print("   Selected date: \(formattedDate)")
        print("   Today spent: $\(todaySpent)")
        print("   Month spent: $\(thisMonthSpent)")
        print("   UI States:")
        print("     - showingAddExpense: \(showingAddExpense)")
        print("     - showingProfile: \(showingProfile)")
        print("     - showingTodayExpenses: \(showingTodayExpenses)")
        print("     - showingAllExpenses: \(showingAllExpenses)")
        print("     - showFullStats: \(showFullStats)")
        print("     - showingSearch: \(showingSearch)")
        print("     - showingQuickActions: \(showingQuickActions)")
    }
    
    func simulateAddExpense() {
        Task {
            guard let firstCategory = categories.first else {
                print("üêõ No categories available for simulation")
                return
            }
            
            let success = await addExpense(
                amount: Double.random(in: 10...100),
                name: "Test Expense",
                categoryId: firstCategory.identifier
            )
            
            print("üêõ Simulated expense addition: \(success ? "SUCCESS" : "FAILED")")
        }
    }
    
    // ‚úÖ –ù–û–í–û–ï: —Å–∏–º—É–ª—è—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–æ–≤
    func simulateScreenNavigation() {
        print("üêõ Simulating screen navigation...")
        
        if showingProfile {
            hideProfile()
        } else {
            showProfile()
        }
    }
}
#endif
